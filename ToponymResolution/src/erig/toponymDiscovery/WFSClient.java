/*
 * Copyright (C) 2016 Ludovic Moncla <ludovic.moncla@univ-pau.fr>
 * 
 * This file is part of ToponymResolution - Perdido project <http://erig.univ-pau.fr/PERDIDO/>
 *
 * ToponymResolution is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ToponymResolution is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ToponymResolution. If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package erig.toponymDiscovery;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.URL;


/**
 * A class representing a WFS client. It allows to send requests and recover the responses to these requests
 * @author Javier Nogueras
 */
public class WFSClient {
    /** URL of the WFS service */
	private String _wfsURL;
	
	/** Name of the feature type to be retrieved */
	private String _typeName;
	
	/** Name of the property that contains the toponym */
	private String _propertyName;
	
	/** Specific namespace used by the WFS server for the toponym feature type (to be used in Get requests) */
	private String _nameSpaceGet;
	
	/** Specific namespace used by the WFS server for the toponym feature type (to be used in Post requests) */
	private String _nameSpacePost;
	
	/** version of the WFS API supported by the server */
	private String _version;
	
	/** type of gml generated by the server */
	private String _subtype;
	
	/** maximum number of results returned in a GetFeatures request */
	private int _maxResults=100;
	
	
	public WFSClient(String wfsURL, String typeName, String propertyName, String nameSpaceGet, String nameSpacePost,String version, String subtype,int maxResults) {
		_wfsURL = wfsURL;
		_typeName = typeName;
		_propertyName = propertyName;
		_nameSpaceGet = nameSpaceGet;
		_nameSpacePost = nameSpacePost;
		_version = version;
		_subtype = subtype;
		_maxResults = maxResults;
	}
	
	public int getMaxResults(){
		return _maxResults;
	}
	
	public String getCapabilities(){
		
		String request=_wfsURL;
		if (request.contains("?"))
			request+="&";
		else
			request+="?";
		request+="service=WFS";
		request+="&request=GetCapabilities";
		request+="&version="+_version;
		System.out.println(request);
		return executeGet(request);
		
	}
	
	/** Probably it could be refactored in the case of having to process a large set of feature results */
	public String getFeaturesPost(String toponymName,boolean strictQuery) {
		String request ="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
		request+="\n<wfs:GetFeature version=\""+_version+"\"";
		request+=" maxFeatures=\""+getMaxResults()+"\" startPosition=\"\"";
		request+="\n xmlns:"+_nameSpacePost;
		request+="\n xmlns:wfs=\"http://www.opengis.net/wfs\"";
		request+="\n xmlns:gml=\"http://www.opengis.net/gml\"";
		request+="\n xmlns:ogc=\"http://www.opengis.net/ogc\"";
		request+="\n outputFormat=\"text/xml; subtype="+_subtype+"\">";
		request+="\n <wfs:Query typeName=\""+_typeName+"\">";
		request+="\n   <ogc:Filter>";
		request+="\n     <ogc:PropertyIsLike wildCard='*' singleChar='?' escapeChar='!' matchCase='false'>";
		request+="\n    <ogc:PropertyName>"+_propertyName+"</ogc:PropertyName>";
		if(strictQuery)
			request+="\n    <ogc:Literal>"+toponymName+"</ogc:Literal>";
		else
			request+="\n    <ogc:Literal>*"+toponymName+"*</ogc:Literal>";
		request+="\n   </ogc:PropertyIsLike>";
		request+="\n </ogc:Filter>";
		request+="\n </wfs:Query>";
		request+="\n </wfs:GetFeature>";
		//System.out.println(request);
		String result = executePost(_wfsURL,request);
		return result;
	}
	
	/** Probably it could be refactored in the case of having to process a large set of feature results */
	public String getFeaturesGet(String toponymName, boolean strictQuery) {
		String request=_wfsURL;
		
		
		if (request.contains("?"))
			request+="&";
		else
			request+="?";
		
		request+="service=WFS";
		request+="&version="+_version;
		request+="&REQUEST=getfeature";
		request+="&TYPENAME="+_typeName;
		request+="&MAXFEATURES="+getMaxResults();
		request+="&Filter=%3Cogc:Filter%3E%3Cogc:PropertyIsLike%20wildCard='*'%20singleChar='?'%20escapeChar='!'%20matchCase='false'%3E";
		request+="%3Cogc:PropertyName%3E"+_propertyName+"%3C/ogc:PropertyName%3E";
		if(strictQuery)
			request+="%3Cogc:Literal%3E"+toponymName+"%3C/ogc:Literal%3E%3C/ogc:PropertyIsLike%3E%3C/ogc:Filter%3E";
		else
			request+="%3Cogc:Literal%3E*"+toponymName+"*%3C/ogc:Literal%3E%3C/ogc:PropertyIsLike%3E%3C/ogc:Filter%3E";
		
		/*
		request+="&Filter=<ogc:Filter><ogc:PropertyIsLike wildCard='*' singleChar='?' escapeChar='!' matchCase='false'>";
		request+="<ogc:PropertyName>"+_propertyName+"</ogc:PropertyName>";
		request+="<ogc:Literal>*"+toponymName+"*</ogc:Literal></ogc:PropertyIsLike></ogc:Filter>";
		*/
		
		/*
		String inputLine = _wfsURL;
		if (inputLine.contains("?"))
			inputLine+="&";
		else
			inputLine+="?";
		try {
			inputLine += java.net.URLEncoder.encode(request, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		
		
			
		//System.out.println(request);
		String result = executeGet(request);
		return result;
	}
	
	public String describeFeatureType(){
		String request=_wfsURL;
		if (request.contains("?"))
			request+="&";
		else
			request+="?";
		request+="service=WFS";
		request+="&REQUEST=DescribeFeatureType";
		request+="&VERSION="+_version;
		request+="&NAMESPACE=xmlns("+_nameSpaceGet+")";
		request+="&TYPENAME="+_typeName;
		System.out.println(request);
		return executeGet(request);
	}
	
	
	private static void wait(int seconds) {
        try{ 
        	Thread.sleep(seconds*1000);
        } catch(Exception ex) {}
		
	}

	
    @SuppressWarnings("unused")
	private static void executeGet(String targetURL, String fileName, int waitingTime) {  
    	
  	  	  if (waitingTime>0) wait(waitingTime);
  	  
	      URL url;  
	      HttpURLConnection connection = null;
	      
	      try {  
	          //Crea la conexion  
	          url = new URL(targetURL);  
	          connection = (HttpURLConnection) url.openConnection();  
	          connection.setRequestMethod("GET");  
//	          connection.setRequestProperty("Content-Type", "text/XML");  
	  
//	          connection.setRequestProperty("Content-Length", "" + Integer.toString(body.getBytes().length));  
	  
	          connection.setUseCaches(false);  
	          connection.setDoOutput(true);  
	  

	          //process response  
	          connection.getErrorStream();  
	          int codigo= connection.getResponseCode();//200, 500, 404, etc.  
	  
	          System.out.println(targetURL + " " +codigo);
	          //Status 200 is Ok
	          if (codigo == 200){ // Si devuelve codigo 200 OK
	        	  
		          //transformar a string el response 
		          InputStream is = connection.getInputStream();  

		          System.out.println("escribiendo "+ fileName);
		          
		          FileOutputStream fos = new FileOutputStream (fileName);
		          
		          int leido = is.read();
		          while (leido!=-1) {
		        	  fos.write(leido);
		        	  leido=is.read();
		          }
		          is.close();
		          fos.close();

		          
		          /*
		          BufferedReader rd = new BufferedReader(new InputStreamReader(is));  
		          
		          PrintWriter pw = new PrintWriter(new OutputStreamWriter (new FileOutputStream (fileName)));
		          
		          String line = rd.readLine();
		          
		          while (line != null) {
		              pw.println(line);
		              line = rd.readLine();
		              
		          }  
		          rd.close();
		          pw.close();
		          */
	          }
	        } catch (Exception e) {
	            System.err.println(e.getMessage());
	            e.printStackTrace();
	        } finally {  
	          if (connection != null) {  
	              connection.disconnect();  
	          }
	          
	      }  
	  } 

	
	
	private static String executeGet(String targetURL) {  
	      URL url;  
	      HttpURLConnection connection = null;
	      String result=null;
	      
	      try {  
	          //Crea la conexion  
	          url = new URL(targetURL);  
	          connection = (HttpURLConnection) url.openConnection();  
	          connection.setRequestMethod("GET");  
//	          connection.setRequestProperty("Content-Type", "text/XML");  
	  
//	          connection.setRequestProperty("Content-Length", "" + Integer.toString(body.getBytes().length));  
	  
	          connection.setUseCaches(false);  
	          connection.setDoOutput(true);  
	  
	          //send request  
	/*          OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());  
	          wr.write(body);  
	          wr.flush();  
	          wr.close();  
	  */
	          //process response  
	          connection.getErrorStream();  
	          int codigo= connection.getResponseCode();//200, 500, 404, etc.  
	  
	          //Status 200 is Ok
	          if (codigo == 200){ // Si devuelve codigo 200 OK
	        	  
		          //transformar a string el response 
		          InputStream is = connection.getInputStream();  
		          BufferedReader rd = new BufferedReader(new InputStreamReader(is));  
		          
		          StringWriter sw = new StringWriter();
		          PrintWriter pw = new PrintWriter(sw);
		          
		          String line = rd.readLine();
		          
		          while (line != null) {
		              pw.println(line);
		              line = rd.readLine();
		              
		          }  
		          rd.close();
		          
		          result= sw.toString();
		          sw.close();pw.close();
		          
	          }else{
	        	  
	        	  result=  "codigo de error "+codigo;
	        	  
	          }
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {  
	          if (connection != null) {  
	              connection.disconnect();  
	          }
	          
	      }  
	      return result;
	  } 

	
	
  private static String executePost(String targetURL, String body) {  
	      URL url;  
	      HttpURLConnection connection = null;
	      String result=null;
	      
	      try {  
	          //Crea la conexion  
	          url = new URL(targetURL);  
	          connection = (HttpURLConnection) url.openConnection();  
	          connection.setRequestMethod("POST");  
	          connection.setRequestProperty("Content-Type", "text/XML");  
	  
	          connection.setRequestProperty("Content-Length", "" + Integer.toString(body.getBytes().length));  
	  
	          connection.setUseCaches(false);  
	          connection.setDoOutput(true);  
	  
	          //send request  
	          OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());  
	          wr.write(body);  
	          wr.flush();  
	          wr.close();  
	  
	          
	          //process response  
	          connection.getErrorStream();  
	          int codigo= connection.getResponseCode();//200, 500, 404, etc.  
	  
	          //Status 200 is Ok
	          if (codigo == 200){ // Si devuelve codigo 200 OK
	        	  
		          //transformar a string el response 
		          InputStream is = connection.getInputStream();  
		          BufferedReader rd = new BufferedReader(new InputStreamReader(is));  
		          String line;  
		          StringBuilder response = new StringBuilder();  
		          while ((line = rd.readLine()) != null) {  
		              response.append(line);  
		          }  
		          rd.close();  
		          result= response.toString();  
		          
	          }else{
	        	  
	        	  result=  "codigo de error "+codigo;
	        	  
	          }
	        } catch (IOException e) {
	            e.printStackTrace();
	        } finally {  
	          if (connection != null) {  
	              connection.disconnect();  
	          }
	          
	      }  
	      return result;
	  } 

	
  
	
	

	
}
